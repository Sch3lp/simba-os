
Building Simba
=-=-=-=-=-=-=-=

Prerequisites for Simba:
* SVN
* Java 6

Simba Manager technology stack:
* AngularJS
* NodeJS
* Grunt
* Bower

1. Simba has a dependency on the thrift compiler (v0.9.1). The windows thrift compiler is provided via SVN, but to
build Simba on another OS, you will need to provide the compiler. Check the Apache Thrift website (http://thrift.apache.org/)
how to get a compiler for your system.

After that you can add a profile for you OS in the parent pom.xml providing the location of the thrift compiler.

2. You need to add C:\<simba_dir>\simba-api\target\generated-sources\thrift\java to your classpath

3. Add following lines to your maven settings file:

  <servers>
    <server>
      <id>nexus</id>
      <username>simba</username>
      <password>simba</password>
    </server>
    <server>
      <id>simba-snapshots</id>
      <username>simba</username>
      <password>simba</password>
    </server>
    <server>
      <id>simba-releases</id>
      <username>simba</username>
      <password>simba</password>
    </server>
  </servers>

  <mirrors>
    <mirror>
      <id>nexus</id>
      <mirrorOf>*</mirrorOf>
      <url>http://nexus.cegeka.be/nexus/content/groups/public</url>
    </mirror>
  </mirrors>
  
  <profiles>
    <profile>
      <id>nexus</id>
      <repositories>
        <repository>
          <id>nexus</id>
          <url>http://nexus</url>
          <releases>
            <enabled>true</enabled>
          </releases>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <id>nexus</id>
          <url>http://nexus</url>
          <releases>
            <enabled>true</enabled>
          </releases>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>

  <activeProfiles>
    <activeProfile>nexus</activeProfile>
  </activeProfiles>


Making a Release
=-=-=-=-=-=-=-=-=
Making a Simba release, ie. deploying the artifacts to the Simba nexus repository relies on Maven.

Making a SNAPSHOT release
--------------------------
To make a snapshot release run the maven goal:

    mvn deploy

this will build, test and package the local sources and publish these artifacts to the nexus snapshot repository.

Making an OFFICIAL release
---------------------------
An official release is a multi-step process.

    1. Run a build with tests, make sure it is successful
    2. Commit and push all local changes
    3. Run the maven goal: mvn release:prepare
       This will prompt for the release version, SCM tag and next snapshot version. Afterward it will update the pom
       files, push them to GitHub, create a tag on GitHub and prepare a release.properties file for next step.
    4. Run the maven goal: mvn release:perform -DuseReleaseProfile=false
       This will perform the previously prepared release. This means uploading all artifacts to the nexus release
       repository.
       The -DuseReleaseProfile=false argument is needed because otherwhise the maven-javadoc-plugin will cause trouble
    5. Go to https://github.com/cegeka/simba-os/releases and draft a new release. Choose the correct existing tag
       for the release. Use "Release x.y.z" as release title and describe the changes. Do not forget to mention
       the earliest compatible version for the api and the client. If there are no breaking changes in current release
       these can be copied from the previous release. Check the "pre-release" checkbox if current release is not
       production ready.
